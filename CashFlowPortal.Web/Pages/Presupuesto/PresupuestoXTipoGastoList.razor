@page "/movimientos/presupuesto"

@attribute [Authorize]

@using CashFlowPortal.Applicacion.DTOs
@using CashFlowPortal.Applicacion.Interfaces
@using CashFlowPortal.Applicacion.DTOs.Presupuesto
@using CashFlowPortal.Applicacion.DTOs.TipoGasto
@using System.Security.Claims
@using Microsoft.AspNetCore.Http

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPresupuestoService PresupuestoService
@inject ITipoGastoService TipoGastoService
@inject NavigationManager Nav



<div class="container mt-4">
    <h3>Presupuestos por Tipo de Gasto (@mes.ToString("yyyy-MM"))</h3>

    <div class="row mb-3">
        <div class="col-auto">
            <label class="form-label">Mes:</label>
            <InputDate @bind-Value="mes" class="form-control" />
        </div>
        <div class="col-auto align-self-end">
            <button class="btn btn-primary" @onclick="Cargar">Cargar</button>
        </div>
    </div>

    @if (presupuestoList == null)
    {
        <p>Seleccione un mes y pulse Cargar.</p>
    }
    else
    {
        <EditForm Model="presupuestoList" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Tipo de Gasto</th>
                        <th>Monto Presupuestado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in presupuestoList)
                    {
                        <tr>
                            <td>
                                @tipos.FirstOrDefault(t => t.Id == p.TipoGastoId)?.Nombre
                            </td>
                            <td>
                                <InputNumber @bind-Value="p.Monto" class="form-control" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="submit" class="btn btn-success">Guardar Presupuestos</button>
        </EditForm>
    }
</div>

@code {
    // Usuario fijo de ejemplo; reemplaza por tu lógica de usuario actual
    //private readonly Guid usuarioId = new Guid("00000000-0000-0000-0000-000000000001");

    private DateTime mes = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private List<PresupuestoDto>? presupuestoList;
    private List<TipoGastoDto> tipos = new();
    private Guid UsuarioId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var idStr = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        tipos = await TipoGastoService.GetAllAsync();

        if (!Guid.TryParse(idStr, out UsuarioId))
        {
            // Aquí podrías mostrar un error o redirigir a login
            throw new InvalidOperationException("Usuario no autenticado correctamente.");
        }
    }

    private async Task Cargar()
    {
        // Trae los existentes
        var existentes = await PresupuestoService.GetByMesAsync(UsuarioId, mes);

        if (existentes == null || !existentes.Any())
        {
            // Inicializa uno por cada tipo de gasto
            presupuestoList = tipos
                .Select(t => new PresupuestoDto
                {
                    Id = Guid.Empty,
                    UsuarioId = UsuarioId,
                    TipoGastoId = t.Id,
                    Mes = mes,
                    Monto = 0m
                })
                .ToList();
        }
        else
        {
            presupuestoList = existentes;
        }
    }

    private async Task Guardar()
    {

        if (presupuestoList == null) return;
        
        foreach (var dto in presupuestoList)
        {
            dto.UsuarioId = UsuarioId;
            await PresupuestoService.AddOrUpdateAsync(dto);
        }
        Nav.NavigateTo("/");
    }
}
