@page "/movimientos/presupuesto"
@attribute [Authorize]

@using CashFlowPortal.Applicacion.DTOs.Presupuesto
@using CashFlowPortal.Applicacion.DTOs.TipoGasto
@using System.Security.Claims
@using FluentValidation

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPresupuestoService PresupuestoService
@inject ITipoGastoService TipoGastoService
@inject NavigationManager Nav

<div class="container mt-4">
    <h3>Presupuestos por Tipo de Gasto (@mes.ToString("yyyy-MM"))</h3>

    @* Alertas Bootstrap *@
    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="@alertCssClass" role="alert">
            @alertMessage
        </div>
    }

    <div class="row mb-3">
        <div class="col-auto">
            <label class="form-label">Mes:</label>
            @* Usamos un input nativo type="month" ligado a mesString *@
            <input type="month"
                   class="form-control"
                   @bind-value="mesD"
                   @bind-value:event="oninput" />
        </div>
        <div class="col-auto align-self-end">
            <button class="btn btn-primary" @onclick="Cargar">Cargar</button>
        </div>
    </div>

    @if (presupuestoList == null)
    {
        <p>Seleccione un mes y presione <strong>Cargar</strong>.</p>
    }
    else
    {
        <EditForm Model="presupuestoList" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Tipo de Gasto</th>
                        <th>Monto Presupuestado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var p in presupuestoList)
                    {
                        <tr>
                            <td>
                                @tipos.FirstOrDefault(t => t.Id == p.TipoGastoId)?.Nombre
                            </td>
                            <td>
                                <InputNumber @bind-Value="p.Monto" class="form-control" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-success">Guardar Presupuestos</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="Volver">Cancelar</button>
            </div>
        </EditForm>
    }
</div>

@code {
    // Guardamos el año-mes en mesString con formato "yyyy-MM"
    private string mesString = DateTime.Today.ToString("yyyy-MM");
    private DateTime mesD = DateTime.Today;

    // La propiedad mes extrae un DateTime con día = 1
    private DateTime mes => DateTime.ParseExact(mesString + "-01", "yyyy-MM-dd", null);

    private List<PresupuestoDto>? presupuestoList;
    private List<TipoGastoDto> tipos = new();
    private Guid UsuarioId;
    private string alertMessage = string.Empty;
    private string alertCssClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var idStr = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        tipos = await TipoGastoService.GetAllAsync();

        if (!Guid.TryParse(idStr, out UsuarioId))
        {
            throw new InvalidOperationException("Usuario no autenticado correctamente.");
        }
    }

    private async Task Cargar()
    {
        alertMessage = string.Empty;

        // Trae los presupuestos existentes para usuario+mes
        var existentes = await PresupuestoService.GetByMesAsync(UsuarioId, mes);

        if (existentes == null || !existentes.Any())
        {
            // Si no hay, inicializa uno por cada tipo de gasto
            presupuestoList = tipos
                .Select(t => new PresupuestoDto
                {
                    Id = Guid.Empty,
                    UsuarioId = UsuarioId,
                    TipoGastoId = t.Id,
                    Mes = mes,
                    Monto = 0m
                })
                .ToList();
        }
        else
        {
            // Si ya existían, muéstralos para editar
            presupuestoList = existentes.ToList();
        }
    }

    private async Task Guardar()
    {
        if (presupuestoList == null)
            return;

        try
        {
            foreach (var dto in presupuestoList)
            {
                dto.UsuarioId = UsuarioId;
                dto.Mes = mes;
                await PresupuestoService.AddOrUpdateAsync(dto);
            }

            alertMessage = "Los presupuestos se guardaron correctamente.";
            alertCssClass = "alert alert-success";
        }
        catch (ValidationException ex)
        {
            alertMessage = ex.Message;
            alertCssClass = "alert alert-danger";
        }
        catch
        {
            alertMessage = "Ocurrió un error al guardar los presupuestos.";
            alertCssClass = "alert alert-danger";
        }
    }

    private void Volver() => Nav.NavigateTo("/");
}
