@page "/reportes"
@attribute [Authorize]

@using CashFlowPortal.Applicacion.DTOs.Reporte
@inject IReporteService ReporteService
@inject IJSRuntime JSRuntime

<style>
    /* Ajusta el contenedor para que el gráfico ocupe todo el ancho disponible */
    .chart-container {
        width: 100%;
        max-width: 800px;
        margin: 1rem auto;
        padding: 1rem;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

        /* El canvas ocupa el 100% del ancho del contenedor */
        .chart-container canvas {
            width: 100% !important;
            height: auto !important;
        }

    /* Estilos para el formulario de fechas y selector */
    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        align-items: flex-end;
        margin-bottom: 1rem;
    }

        .form-row .col {
            flex: 1 1 200px;
        }

        .form-row label {
            font-weight: 600;
        }
</style>

<h3 class="mb-3">Gráfico Comparativo Presupuesto vs Ejecución</h3>

<div class="form-row">
    <div class="col">
        <label for="inputDesde">Desde:</label>
        <InputDate id="inputDesde" @bind-Value="fechaDesde" class="form-control" />
    </div>
    <div class="col">
        <label for="inputHasta">Hasta:</label>
        <InputDate id="inputHasta" @bind-Value="fechaHasta" class="form-control" />
    </div>

    <div class="col">
        <label for="chartType">Tipo de gráfico:</label>
        <select id="chartType" @bind="tipoGrafico" class="form-select">
            <option value="bar">Barras</option>
            <option value="pie">Torta</option>
        </select>
        <div class="col-auto">
            <button class="btn btn-primary mb-3" @onclick="CargarDatos">Actualizar</button>
        </div>
    </div>
</div>
<div class="chart-container">
    @* <canvas id="chart"></canvas> *@
    <canvas id="chartCanvas"></canvas>
</div>
@code {
    private DateTime fechaDesde = DateTime.Today.AddMonths(-1);
    private DateTime fechaHasta = DateTime.Today;
    private string tipoGrafico = "bar";

    private List<string> etiquetas = new();
    private List<decimal> datosPresupuesto = new();
    private List<decimal> datosEjecutado = new();

    private DotNetObjectReference<GraficoComparativo>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Carga inicial sin datos hasta que el usuario presione "Actualizar"
            objRef = DotNetObjectReference.Create(this);
        }
    }

    private async Task CargarDatos()
    {
        var lista = (await ReporteService.GetComparativoAsync(fechaDesde, fechaHasta)).ToList();
        etiquetas = lista.Select(x => x.TipoGasto).ToList();
        datosPresupuesto = lista.Select(x => x.Presupuestado).ToList();
        datosEjecutado = lista.Select(x => x.Ejecutado).ToList();

        // Llama al JS para renderizar/actualizar el chart
        await JSRuntime.InvokeVoidAsync("renderComparativoChart",
            "chartCanvas", etiquetas, datosPresupuesto, datosEjecutado, tipoGrafico);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}
