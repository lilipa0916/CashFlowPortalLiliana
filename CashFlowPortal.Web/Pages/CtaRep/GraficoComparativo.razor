@page "/reportes"
@attribute [Authorize]

@using CashFlowPortal.Applicacion.DTOs.Reporte
@inject IReporteService ReporteService
@inject IJSRuntime JSRuntime


@* <style>
    .chart-container {
        width: 100%;
        height: 70vh;
        max-height: 600px; 
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }

        .chart-container canvas {
            width: 100% !important;
            height: 100% !important;
        }
    /* Título con margen superior */
    h3.mb-4 {
        margin-top: 1.5rem;
    }
</style> *@

<style>
    .chart-container {
        width: 100%;
        max-width: 800px;
        margin: 1rem auto;
        padding: 1rem;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        height: 80%; /* Espacio vertical fijo para que el canvas se adapte */
    }

        .chart-container canvas {
            width: 100% !important;
            height: 100% !important;
        }
</style>

<h3 class="mb-4">Gráfico Comparativo Presupuesto vs Ejecución</h3>

<!-- FILTROS: Desde, Hasta, Tipo de gráfico y Botón Cargar -->
<div class="row align-items-end mb-3">
    <!-- DESDE -->
    <div class="col-md-3">
        <label for="inputDesde" class="form-label">Desde:</label>
        <InputDate id="inputDesde" @bind-Value="fechaDesde" class="form-control" />
    </div>

    <!-- HASTA -->
    <div class="col-md-3">
        <label for="inputHasta" class="form-label">Hasta:</label>
        <InputDate id="inputHasta" @bind-Value="fechaHasta" class="form-control" />
    </div>


    <!-- BOTÓN CARGAR -->
    <div class="col-md-3">
        <button class="btn btn-primary w-100" @onclick="CargarDatos">
            <i class="bi bi-arrow-clockwise me-1"></i> Cargar
        </button>
    </div>
</div>

<!-- CONTENEDOR DEL CHART -->
<div class="chart-container">
    <canvas id="chartCanvas"></canvas>
</div>

@code {
    private DateTime fechaDesde = DateTime.Today.AddMonths(-1);
    private DateTime fechaHasta = DateTime.Today;
    private string tipoGrafico = "bar";

    private List<string> etiquetas = new();
    private List<decimal> datosPresupuesto = new();
    private List<decimal> datosEjecutado = new();

    private async Task CargarDatos()
    {
        var lista = (await ReporteService.GetComparativoAsync(fechaDesde, fechaHasta)).ToList();
        etiquetas = lista.Select(x => x.TipoGasto).ToList();
        datosPresupuesto = lista.Select(x => x.Presupuestado).ToList();
        datosEjecutado = lista.Select(x => x.Ejecutado).ToList();

        await JSRuntime.InvokeVoidAsync("renderComparativoChart",
            "chartCanvas", etiquetas, datosPresupuesto, datosEjecutado, tipoGrafico);
    }
}