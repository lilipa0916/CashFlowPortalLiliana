@page "/login"
@using CashFlowPortal.Applicacion.DTOs.Auth
@using CashFlowPortal.Applicacion.Services
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject IAuthService AuthService
@inject NavigationManager Nav

@inject ProtectedSessionStorage sessionStorage

<h3>Login</h3>

@if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Usuario:</label>
        <InputText @bind-Value="loginModel.Usuario" class="form-control" />
    </div>
    <div class="form-group">
        <label>Contraseña:</label>
        <InputText @bind-Value="loginModel.Clave" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Ingresar</button>
</EditForm>


@code {
    private LoginRequestDto loginModel = new();
    private string? error;

    private async Task HandleLogin()
    {
        try
        {
            var response = await AuthService.LoginAsync(loginModel);

            // Guardar el token en localStorage (o en ProtectedSessionStorage)
            // En Blazor Server no hay localStorage en el servidor:
            // si quieres persistir en sesión, usa ProtectedSessionStorage o ProtectedLocalStorage.
            // A modo de ejemplo, usamos ProtectedSessionStorage:

            await sessionStorage.SetAsync("authToken", response.Token);
            await sessionStorage.SetAsync("tokenExpiration", response.ExpiraEn);

            Nav.NavigateTo("/");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}